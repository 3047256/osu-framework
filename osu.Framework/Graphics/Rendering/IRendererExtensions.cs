// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.
// See the LICENCE file in the repository root for full licence text.

using osu.Framework.Graphics.Primitives;
using osuTK;

namespace osu.Framework.Graphics.Rendering
{
    public static class IRendererExtensions
    {
        /// <summary>
        /// Applies a new orthographic projection rectangle. Pop with <see cref="IRenderer.PopProjectionMatrix"/>.
        /// </summary>
        /// <param name="renderer">The renderer.</param>
        /// <param name="ortho">The rectangle to create the orthographic projection from.</param>
        public static void PushOrtho(this IRenderer renderer, RectangleF ortho)
        {
            renderer.PushProjectionMatrix(Matrix4.CreateOrthographicOffCenter(ortho.Left, ortho.Right, ortho.Bottom, ortho.Top, -1, 1));
        }

        /// <summary>
        /// Applies a new projection matrix so that all drawn vertices are transformed by <paramref name="matrix"/>.
        /// This also affects masking. Call <see cref="PopLocalMatrix"/> after using.
        /// </summary>
        /// <param name="renderer">The renderer.</param>
        /// <param name="matrix">The matrix.</param>
        public static void PushLocalMatrix(this IRenderer renderer, Matrix4 matrix)
        {
            var currentMasking = renderer.CurrentMaskingInfo;
            // normally toMaskingSpace is fed vertices already in screen space coordinates,
            // but since we are modifying the matrix the vertices are in local space
            currentMasking.ToMaskingSpace = new Matrix3(matrix) * currentMasking.ToMaskingSpace;
            renderer.PushMaskingInfo(currentMasking, true);
            renderer.PushProjectionMatrix(matrix * renderer.ProjectionMatrix);
        }

        /// <inheritdoc cref="PushLocalMatrix(IRenderer, Matrix4)"/>
        public static void PushLocalMatrix(this IRenderer renderer, Matrix3 matrix)
        {
            renderer.PushLocalMatrix(new Matrix4(matrix));
        }

        /// <summary>
        /// Pops the state generated by <see cref="PushLocalMatrix(IRenderer, Matrix4)"/>.
        /// </summary>
        /// <param name="renderer">The renderer.</param>
        public static void PopLocalMatrix(this IRenderer renderer)
        {
            renderer.PopProjectionMatrix();
            renderer.PopMaskingInfo();
        }
    }
}
